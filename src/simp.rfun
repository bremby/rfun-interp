-- | PEANO ARTIHMETIC

-- eq :: Nat -> Nat <-> ()
-- eq  Z     Z    = ()
-- eq (S x) (S y) = eq x y

-- dup :: Nat -> () <-> Nat
-- dup x () = eq! x ()

-- -- | PEANO ARTIHMETIC

-- eq :: a -> a <-> ()

dup :: a -> () <-> a
dup x () = eq! x ()


data Nat = Z | S Nat

map :: (a <-> b) -> [a] <-> [b]
map fun     []   = []
map fun (x : xs) =
    let x'  = fun x
        xs' = map fun xs
    in  (x' : xs')

plus :: Nat -> Nat <-> Nat
plus Z     x = x
plus (S y) x =
  let x' = plus y x
  in  (S x')

fib :: Nat <-> (Nat, Nat)
fib Z    = ((S Z),(S Z))
fib (S m) =
  let (x,y) = fib m
      y' = plus x y
  in (y', x)

length :: [a] -> () <-> Nat
length []       () = Z
length (x : xs) () =
  let l = length xs ()
  in (S l)

move :: Nat -> ([a], [a]) <-> ([a], [a])
move  Z     (   x  , l) = (x, l)
move (S s) ((x:xs), l) =
  move s (xs,(x:l))

reverse :: [a] <-> [a]
reverse xs =
    let xs_s = length xs ()
        ([], ys) = move xs_s (xs, [])
        () = length! ys xs_s
    in   ys



-- minus :: Nat -> Nat <-> Nat
-- minus x y | eq x y = Z
-- minus x y = plus! x y

