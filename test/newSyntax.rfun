data Nat = Z
         | S Nat

dup :: a => a -> a
dup v =^=
		case |{v}| of
				{v1, v2} -> v1 v2

plus :: Nat -> Nat => Nat -> Nat
plus x  Z  =^= 
	let dub x1 x2 <= dup x
	in  x1 x2
plus x (S u) =^= 
    let pluz xp up <= plus x u
    in  xp (S up)

inc :: Nat => Nat
inc x =^=
	let plus (S Z) y <= plus (S Z) x
	in  y

inc' :: Nat => Nat
inc' x =^=
	let f = plus (S Z)
	in  f


-- map applying the function given in fun
map :: (a -> b) -> [a] => (a -> b) -> [b]
map fun     []   =^= fun []
map fun (x : xs) =^= 
		let fun' x' <= fun x
		    map fun'' xs' <= map fun' xs
		in  fun'' (x' : xs')


