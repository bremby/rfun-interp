---------------------------------------------------------------
---- BASIC
---------------------------------------------------------------

-- swap :: a * b -> b * a
swap {x,y} =^= {y,x}

flip {fun, val} =^= 
	let val' = swap val
	    upd  = fun val'
	    upd' = swap upd
	in  {fun, upd'}


id x =^= x

-- It is possible to diverge
rec x =^= 
		let x' = rec x
		in x'

-- |Implemententation of |.| as a function
-- dupEq v =^=
-- 		case |v| of
				-- v' -> v'

dupEq v =^= |v|

dup v =^= |{v}|

eq v =^=
	rlet v = dup v'
	in   v'

---------------------------------------------------------------
---- ARITHMETIC
---------------------------------------------------------------

--data N = Z | S(n)

-- even :: N -> Either N N
even_ Z =^= Right(Z)
even_ S(Z) =^= Left(S(Z))
even_ S(S(x)) =^= 
		let x' = even_ x
		in  case x' of
						Right(x'') -> Right (S(S(x'')))
						Left(x'')  -> Left (S(S(x'')))

-- even :: N -> N
--   only defined for even numbers
even Z =^= Z
even S(S(x)) =^= 
		let x' = even x
		in  S(S(x'))

-- odd :: N -> N
--   only defined for odd numbers
odd S(Z) =^= S(Z)
odd S(S(x)) =^= 
		let x' = odd x
		in  S(S(x'))

incT Z =^= S(Z)
incT S(np) =^= 
		let npp = incT np 
		in  S(npp)

inc s =^= S(s)

--plus :: Nat -> Nat <-> Nat
plus {  Z , y} =^= |{y}|
plus {S(x), y} =^= 
    let {xp,yp} = plus {x,y} 
    in  {S(xp), yp}

plusS {  x , y} =^= 
	let {y', x'} = plus {y,x}
	in  {x', y'}

-- Ikke peano safe plusP med Z
plusP {Z,   Z}    =^= {Z, Z}
plusP {S(x),   Z} =^= 
	  let  {x',Z} = plusP {x, Z}
	  in   {S(x'),Z}
plusP {x,S(y)} =^= 
    let {xp,yp} = plusP {x,y} 
    in  {S(xp), S(yp)}

minus xy =^=
		rlet xy = plus xyp
		in   xyp

-- fib :: N -> N * N
fib Z    =^= {S(Z),S(Z)}
fib S(m) =^= 
		let {x,y} = fib m 
		in plus {y,x}

mult {x,   Z } =^= {x, Z}
--mult {x,   S(Z) } =^= |{x}|
mult {x, S(y)} =^=
		let {xp, yp} = mult {x, y}
		    {ypp, xpp} = plusP {yp, xp}
		in  {xpp, ypp}

mult2 {x, y} =^=
	let {y', x'} = mult {y,x}
	in  {x', y'}

div {x, S(y)} =^=
    rlet {S(y), x} = mult {yp, xp}
    in   {xp, yp}

-- fact Z =^= Z
-- fact S(n) =^=
-- 		let 

---------------------------------------------------------------
---- BINARY ARITHMETIC
---------------------------------------------------------------

--data BOOL = T |Â F
--data N = [Bool]

xor {T, F} =^= {T, T}
xor {T, T} =^= {T, F}
xor {F, F} =^= {F, F}
xor {F, T} =^= {F, T}

tof {T, T, T} =^= {T, T, F}
tof {T, T, F} =^= {T, T, T}
tof {T, F, T} =^= {T, F, T}
tof {T, F, F} =^= {T, F, F}
tof {F, T, T} =^= {F, T, T}
tof {F, T, F} =^= {F, T, F}
tof {F, F, T} =^= {F, F, T}
tof {F, F, F} =^= {F, F, F}

maj {T, T, T} =^= {{T, T}, T}
maj {T, T, F} =^= {{T, F}, T}
maj {T, F, T} =^= {{F, T}, T}
maj {T, F, F} =^= {{T, T}, F}
maj {F, T, T} =^= {{F, F}, T}
maj {F, T, F} =^= {{T, F}, F}
maj {F, F, T} =^= {{F, T}, F}
maj {F, F, F} =^= {{F, F}, F}

sum {a, b ,c} =^= 
	let {a', c'}  = xor {a, c}
	    {b', c''} = xor {b, c'}
	in  {a', b', c''}

bAdd {a, b} =^= 
	let {a', b', F} = bAddh {a, b, F}
	in  {a', b'}

bAddh {[], [], c}     =^= {[], [], c}
bAddh {(a:as), (b:bs), c} =^= 
	let  {tmp, c'} = maj {a, b, c}
	     {as', ss, c''} = bAddh {as, bs, c'}
	rlet {tmp, c''} = maj {a', b', c'''}
	let  {a'', c'''', s} = sum {a', c''', b'}
	in   {(a'':as'), (s:ss), c''''}


---------------------------------------------------------------
---- GENERAL ARITHMETIC
---------------------------------------------------------------

-- This square root function is very simple and basically iterates 
-- over all possible integers. Function will fail if the input 
-- is not the square of an integer.
sqrt s =^=
	let {i,sq} = sqrt_h {1,1,s}
      {sq'} = dupEq {S(i),sq}
  in  sq'

sqrt_h {n,m,s} =^=
	case |{m,s}| of
		{m',s'} ->
			let {m'',s''} = less {m',s'}
			    {n',m'''} = plus {n,m''}
			    {n'',m4} = plus {S(n'),m'''}
			    {i,sq} = sqrt_h {n'',m4,s''}
			in  {S(i),sq}
		{s'} -> 
			let {n',n''} = divide {n,s'}
			    {n'''} = dupEq {n',n''} 
			in {Z,n'''}

square x =^= rlet x = sqrt x' in x'

compare {Z   ,   Z } =^= EQ(Z)
compare {Z   , S(b)} =^= LT(Z,S(b))
compare {S(a),   Z } =^= GT(S(a),Z)
compare {S(a), S(b)} =^= 
		let c = compare {a,b}
		in case c of
				EQ(a)    -> EQ(S(a))
				LT(a, b) -> LT(S(a), S(b))
				GT(a, b) -> GT(S(a), S(b))

less {  Z , S(b)} =^= {Z, S(b)}
less {S(a), S(b)} =^= 
		let {a', b'} = less {a, b}
		in  {S(a'), S(b')}

neq {  Z , S(b)} =^= {Z, S(b)}
neq {S(a),   Z } =^= {S(a), Z}
neq {S(a), S(b)} =^= 
		let {a', b'} = neq {a, b}
		in  {S(a'), S(b')}

eq {a,b} =^=
		case |{a,b}| of
				{x} -> x

---------------------------------------------------------------
---- LIST TRANSFORMATION
---------------------------------------------------------------

-- |Zip
zip {[],[]} =^= []
zip {(x:xs),(y:ys)} =^=
	let zs = zip {xs, ys}
	in  ({x,y}:zs)

-- |Unzip
unzip v =^= rlet v = zip v' in v'


-- scan1 is basic functions
scanl1 {fun, []}  =^= {fun, []}
scanl1 {fun, [x]} =^= {fun, [x]}
scanl1 {fun, (x:y:xs)} =^= 
    let {x', y'}    = fun {x, y}
        {fun', (y'':xs')} = scanl1 {fun, (y':xs)}
    in  {fun', (x':y'':xs')}

scanr1 {fun, []} =^= {fun, []}
scanr1 {fun, [x]} =^= {fun, [x]}
scanr1 {fun, (x:y:xs)} =^= 
	let {fun', (y':xs')} = scanr1 {fun, (y:xs)}
			{y'', x'} = fun' {y', x}
	in  {fun', (x':y'':xs')}

scanr12 {fun, ls} =^= 
	let ls' = reverse ls
		  {fun', ls''} = scanl1 {fun, ls'}
		  ls''' = reverse ls''
	in {fun', ls'''}

sumInc {x,y} =^=
	let {x',y'} = plus {x,y}
	in  {x',S(y')}

sumInc2 {x,y} =^=
	let {y',x'} = plus {y,x}
	in  {S(x'),y'}

-- foldr applying function given in fun
--   this is actually more similar to mapAccumL
mapAccumL {fun,x,[]} =^= {fun,x,[]}
mapAccumL {fun,x,(y:ys)} =^= 
	let {x',y'} = fun {x,y}
	    {fun', x'',ys'} = mapAccumL {fun, x',ys}
	in  {fun', x'', (y':ys')}


-- scanr applying function given in fun
scanl {fun, i, []}     =^= {fun, i, []}
scanl {fun, i, (x:xs)} =^= 
	  let {i', x'} = fun {i, x}
	      {fun', x'', l} = scanl {fun, x', xs}
	  in  {fun', i', (x'' : l)}

-- scanl applying function given in fun
scanr {fun, i, []}      =^= {fun, i, []}
scanr {fun, i, [x]}     =^= 
		let {i', x'} = fun {i, x}
		in  {fun, i', [x']}
scanr {fun, i, (x : z : xs)} =^= 
		let {fun', i', (y:ys)} = scanr {fun, i, (z : xs)}
		    {y', x'} = fun' {y, x}
		in  {fun', i', (x' : y' : ys)}


-- foldr applying function given in fun
--   this is actually more similar to mapAccumL
foldl {fun,x,[]} =^= {fun,x,[]}
foldl {fun,x,(y:ys)} =^= 
	let {y',x'} = fun {y,x}
	    {fun', x'',ys'} = foldl {fun, x',ys}
	in  {fun', x'', (y':ys')}

flip2 {{fun, x}, y} =^= 
	let {y', x'}  = fun {y, x}
	in  {{fun, y'}, x'}

foldl2 {flipFun, fun, x, ys} =^=
	let {flipFun', {fun',x'}, ys'} = scanl {flipFun, {fun, x}, ys}
	in  {flipFun', fun', x', ys'}

foldl1 {fun, (x:xs)} =^=
	let {x',x''} = dupEq {x} 
	    {fun', y, xs'} = foldl {fun, x',xs}
	in  {fun', y,(x'':xs')}


-- foldl applying function given in fun
--   this is actually more similar to mapAccumL
foldr {fun,x,[]} =^= {fun,x,[]}
foldr {fun,x,(y:ys)} =^= 
	let {fun',x',ys'} = foldr {fun,x,ys}
      {y',x''} = fun' {y,x'}
	in  {fun', x'', (y':ys')}

foldr1 {fun,[x]} =^= 
	let {x',x''} = dupEq {x}
	in  {fun,x',[x'']}
foldr1 {fun,(y:ys)} =^= 
	let {fun',x,ys'} = foldr1 {fun, ys}
      {y',x'} = fun' {y,x}
	in  {fun', x', (y':ys')}


-- map applying the function given in fun
map {fun,     []  } =^= {fun, []}
map {fun, (x : xs)} =^= 
		let x' = fun x
		    {fun', xs'} = map {fun, xs}
		in  {fun', (x' : xs')}

-- Simple reverse with last
rev [] =^= []
rev (x:xs) =^=
	  let  xs' = rev xs
	  rlet {xs',x} = last xs''
	  in xs''

-- Reverse of a list
reverse xs =^= 
		let  {xs_s, xs'}     = length xs
		     {[], ys, xs_s'} = move {xs', [], xs_s} 
		rlet {xs_s', ys}     = length ys'
		in   ys'

-- This function in only partial
--  helper to reverse
move {    x , l,   Z } =^= {x, l, Z}
move {(x:xs), l, S(s)} =^= 
		let {ys, ls, s'} = move {xs,(x:l),s} 
		in  {ys, ls, S(s')}

-- splitAt is identical to the Haskell version
splitAt {  Z ,       l } =^= {[],l}
splitAt {S(s), (l : ls)} =^=
		let {l1, l2} = splitAt {s, ls}
		in  {(l : l1), l2}

-- Finds the head and tail
hdtl (x:xs) =^= {x,xs}

-- Finds the last elements and the rest of the list
last ([x])  =^= {[],x}
last (x:xs) =^= 
	let {xs',l} = last xs
	in  {(x:xs'),l} 


-- If it is called reverse and the N is not equal
--   to the length of the list, I will fail.
length [] =^= {Z,[]}
length (x : xs) =^=
		let {l, xs'} = length xs
		in  {S(l), (x : xs')}

-- append function
append {[],l}      =^= {[], l}
append {(x : xs), l} =^=  
		let {xs', l'} = append {xs, l}
		    {x', x''} = dupEq {x}
		in  {(x' : xs'), (x'' : l')} 

-- The reverse of the append
unAppend x =^=
		rlet x = append x'
		in x'

-- Identical to Haskell replicate function
replicate {S(Z),x} =^= [x]
replicate {S(n),x} =^=
	let {x',x''} = dupEq {x}
	    xs = replicate {n,x'}
	in  (x'':xs)

-- Similar to Haskell intersperse function
intersperse {x,[]}       =^= {x,[]}
intersperse {x,[y]}      =^= {x,[y]}
intersperse {x,(l:list)} =^= 
	let {x',list'} = intersperse {x,list}
	    {x'',xn} = dupEq {x'}
	in  {x'',(l:xn:list')}

-- Identical to Haskell transpose function
transpose []     =^= []
transpose (x:xs) =^=
	let xs' = transpose xs
	in  addToLists {x,xs'}

-- Helper function for transpose
--   Adds empty lists this second input is an empty list, e.g. addToLists {[1,2],[]} = [[1],[2]]
addToLists {[],[]} =^= []
addToLists {(x:xs),[]} =^=
	let ys' = addToLists {xs, []}
	in  (([x]):ys')
addToLists {(x:xs),(y:ys)} =^=
	let ys' = addToLists {xs, ys}
	in  ((x:y):ys')

-- Identical to Haskell subsequences function
subsequences [] =^= [[]]
subsequences (x:xs) =^=
	let xs' = subsequences xs
	in  duplicateAdd {x,xs'}

-- Helper function for subsequences
duplicateAdd {x,[y]} =^= 
	let {y',y''} = dupEq {y}
	in  [y',(x:y'')]
duplicateAdd {x,(y:ys)} =^= 
	let {x',x''} = dupEq {x}
			ys' = duplicateAdd{x',ys}
	    {y',y''} = dupEq {y}
	in  (y':(x'':y''):ys')

-- Divide a list into n lists of size m
divideOf {S(Z),m,xs} =^=
	rlet {m,xs} = length xs'
	in   [xs']
divideOf {S(n),m,xs} =^=
	let {m',m''} = dupEq {m}
			{x,xs'} = splitAt {m', xs}
	    xs'' = divideOf {n,m'',xs'}
	in  (x:xs'')

-- Divide a list into lists of size m
divideSize {m,xs} =^=
	let  {len,xs'} = length xs
	rlet {m,len} = mult {m',n}
	in   divideOf {n,m',xs'}

-- Finds all permutations of a list
--   Does not give the same order as the Haskell version.
permutations [] =^= []
permutations [x] =^= [[x]]
permutations (x:xs) =^=
	let  ys = permutations xs
	     ys' = perms {x,ys}
	rlet ys' = divideSize {m,(y:ys'')}
			 {m,y} = length y'
	in (y':ys'')

-- Helper function for permutations
perms {x,[y]} =^= 
	let z = interleave {x,y}
	in [z]
perms {x, (y:ys)} =^=
	let {x',x''} = dupEq {x}
	    zs = perms {x',ys}
	    z = interleave {x'',y}
	in  (z:zs)

-- Adds x to all possible positions in ys
interleave {x,[]} =^= [[x]]
interleave {x,(y:ys)} =^= 
	let (z:zs) = interleave {x,ys}
			{(x':z'),z''} = dupEq {z}
			(z'':zs') = consToLists {y,(z':z'':zs)}
  in  ((x':z''):zs')

-- Adds x to the front of all lists in y
consToLists {x,[y]} =^= [(x:y)]
consToLists {x, (y:ys)} =^=
	let {x',x''} = dupEq {x}
	    ys' = consToLists {x',ys}
	in  ((x'':y):ys')

-- Identical to Haskell group function 
--   and not far from the run-length encoding
group [] =^= []
group (x:xs) =^=
	case group xs of
		[] -> [[x]]
		((y:ys):tail) -> 
			case |{x,y}| of
				{x'} ->
					let {x'',y''} = dupEq {x'}
					in  ((x'':y'':ys):tail)
				{x',y'} -> ([x']:(y':ys):tail)

-- Equal to the Haskell tails function
tails [] =^= [[]]
tails (x:xs) =^=
	let {xs',xs''} = dupEq {xs}
	    ys = tails xs'
	in  ((x:xs''):ys)

-- Equal to the Haskell inits function
inits [] =^= [[]]
inits (x:xs) =^=
	let ys = inits xs
			ys' = consToLists {x,ys}
	in  ([]:ys')


---------------------------------------------------------------
---- APPLICATIONS
---------------------------------------------------------------

-- pack :: Eq a => [a] -> [a * N]
pack [] =^= []
pack (c1 : r) =^=
	case pack r of
			[] -> [{c1, S(Z)}]
			({c2, n} : t) ->
					case |{c1,c2}| of
							{c1p, c2p} -> ({c1p, S(Z)} : ({c2p, n} : t))
							{c} -> ({c, S(n)} : t)


